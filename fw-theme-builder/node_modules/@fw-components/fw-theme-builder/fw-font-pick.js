var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { html, LitElement } from "lit";
import { customElement, property, state } from "lit/decorators.js";
import { repeat } from 'lit/directives/repeat.js';
import '@polymer/paper-dropdown-menu/paper-dropdown-menu';
import '@polymer/paper-listbox/paper-listbox';
import '@polymer/paper-item/paper-item';
import { DropdownStyles, PlainInputStyles } from '@fw-components/styles/input-styles';
let FwFontPick = class FwFontPick extends LitElement {
    constructor() {
        super(...arguments);
        this.label = "";
        this.options = [];
        this.showDropdown = false;
        this.value = {
            name: "DM Sans",
            url: "https://fonts.gstatic.com/s/dmsans/v11/rP2Hp2ywxg089UriCZOIHQ.woff2",
            style: "'DM Sans', sans-serif",
        };
    }
    optionSelectHandler(e) {
        return __awaiter(this, void 0, void 0, function* () {
            const selection = e.detail.item.obj;
            if (selection.name === this.value.name)
                return;
            let detail = {
                value: selection,
            };
            const event = new CustomEvent("value-changed", {
                detail,
                bubbles: true,
                composed: true,
            });
            this.dispatchEvent(event);
            const selectedFont = new FontFace(selection.name, `url(${selection.url})`);
            document.fonts.add(selectedFont);
            yield selectedFont.load();
            this.value = selection;
        });
    }
    render() {
        return html `
      ${DropdownStyles} ${PlainInputStyles}
      <span part="font-container">
        <style>
          :host {
            font-family: ${this.value.style};
          }
        </style>
        <div part="font-button">
          <paper-dropdown-menu .dynamicAlign=${true} class="plain" no-label-float @iron-select=${(e) => this.optionSelectHandler(e)} style="width:100%" >
              <paper-listbox  style="color:#000" slot="dropdown-content" .selected=${this.value.name || ''} attr-for-selected="name">
              ${this.options && repeat(this.options, (item) => html `<paper-item style='font-family: ${item.style}' .name=${item.name} .obj=${item}>${item.name}</paper-item>`)}
              </paper-listbox>
          </paper-dropdown-menu>
        </div>
      </span>
    `;
    }
};
__decorate([
    property({ type: String })
], FwFontPick.prototype, "label", void 0);
__decorate([
    property({ type: Array })
], FwFontPick.prototype, "options", void 0);
__decorate([
    state()
], FwFontPick.prototype, "showDropdown", void 0);
__decorate([
    property({ type: Object })
], FwFontPick.prototype, "value", void 0);
FwFontPick = __decorate([
    customElement("fw-font-pick")
], FwFontPick);
export { FwFontPick };
//# sourceMappingURL=fw-font-pick.js.map